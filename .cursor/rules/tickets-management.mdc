---
description: How to manage tickets
globs: 
alwaysApply: false
---
# Instructions

- All tickets must be written according to the GODS framework. 
- All tickets and messages must be in English.
- To manipulate tickets, use tools:
    + add_issue_comment
    + create_issue
    + get_issue
    + get_issue_comments
    + list_issues
    + search_issues
    + update_issue

```
# Framework GODS: Clear and Precise Task Setting

## What is GODS?

The framework helps to formulate tasks in a way that avoids misunderstandings between the "client" and the "executor":
- Helps to clearly articulate the goal, context, and criteria for task completion.
- Makes the task transparent and understandable for executors and clients.
- Suitable for tasks with predictable cycles and measurable results.
- Does not replace flexible processes in research, innovation, or dynamic projects.

**Structure:**

- **Goal:**
  Why are we performing the task? What is the business goal?

- **Overview:**
  What is happening now? Why did the task arise? What is happening around it?

- **Definition of Done:**
  When do we consider the task completed? By what criteria?

- **Solution:**
  How can the task be solved?

---

## Where GODS Works Best

The framework is applicable where:
- The goal of the task is clear.
- The context is clearly described.
- There are measurable criteria for completion.
- The executor is free to choose the solution.

Ideal for:
- Incidents.
- Operational DevOps tasks.
- Infrastructure development tasks.
- Requests from product teams.
- Business processes with clear outcomes.
- Tool implementation.
- Testing, change management, product launches.

Ineffective for:
- Innovative projects without clear outcomes.
- Tasks with rapidly changing requirements.
- Processes with a high degree of uncertainty, where flexible management is needed.
- Projects where it is important to control intermediate stages, risks, and strategy adaptation.

---

## Examples of Applying GODS

### 1. Incidents (Platform team)

- **Goal:** Restore the CI/CD pipeline so that deployment delays do not exceed 1 hour.
- **Overview:** Updated the Jenkins plugin → 5 builds with errors → version incompatible.
- **Definition of Done:** All builds pass without errors within a day, tests ≥98% successful, team notified.
- **Solution:** Roll back the plugin, patch, or change the tool after log analysis.

---

### 2. Operational Tasks (Platform team)

- **Goal:** Update the monitoring system to reduce false positives.
- **Overview:** Outdated rules → too many alerts.
- **Definition of Done:** False positives ↓80%, checks passed, documentation updated.
- **Solution:** Use a ready-made runbook and scripts.

---

### 3. Platform Development (Platform team)

- **Goal:** Implement a predictive analytics module to prevent incidents.
- **Overview:** Incident frequency has increased by 25%, no forecasting tools available.
- **Definition of Done:** Module integrated, accuracy ≥85%, pilot tested within 3 months.
- **Solution:** Research ML models, selection after analysis.

---

### 4. Product Team Requests (Platform team)

- **Goal:** Move the Alpha service to Docker to speed up deployment and simplify support.
- **Overview:** Currently, Alpha runs on virtual machines, deployment takes a long time and causes errors during updates.
- **Definition of Done:**
  - The service runs in Docker.
  - Deployment time reduced by 50%.
  - All tests pass successfully.
  - Documentation updated.
  - Pilot launch confirmed.
- **Solution:** Use Docker Compose, CI/CD integration, and monitoring setup.
```